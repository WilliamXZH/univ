package pers.william.MCB;

import java.util.Scanner;

public class FirstTest {
	
	static int n=0;
	static int k=0;
	boolean flag[][];
	String info = "";
	
	private void initialFlag(){
		flag = new boolean[n][n];
		
		for(int i=0; i<n; i++){
			
			for(int j=0; j<n; j++){
				if(i==j||i==0||j==n-1){
					flag[i][j] = true;
				}else{
					flag[i][j] = false;
				}
			}
		}
	}
	public static void main(String[] args){
		Scanner scan = new Scanner(System.in);
		System.out.println("enter the number of N and k:\n");

		n = scan.nextInt();
		k = scan.nextInt();
		scan.close();
		
		
		System.out.println(n + " missionaries and cannibals.\n"
				+ k +" maxsum on board.\n");
		FirstTest ft = new FirstTest();
		
		ft.initialFlag();
		//ft.DFS(n, n, n, k, true, true);
	}
	
	private boolean DFS(int liv_m, int liv_c, boolean locationOfBoard, boolean isRoot){
		
		System.out.println(liv_m + " " + liv_c + " " + locationOfBoard +"\n");
		if(liv_m==0 && liv_c==0)return true;
		
		if(liv_m!=0 && liv_m != liv_c)return false;
		
		if(locationOfBoard){
			for(int i=0; i<=k && i<=liv_m; i++){
				for(int j=0; j<=k-i && j<=liv_c && j<=i; j++){
					if(i+j!=0 && DFS(liv_m-i, liv_c-j, false, false)){
						info = i +" misssionaries and " + j 
								+" cannibals go to the other side of the river.\n" + info;
					}
					if(isRoot){
						System.out.println(info + "\n\n");
					}
				}
			}
		}else{
			for(int i=0; i<=k && i<=n-liv_m; i++){
				for(int j=0; j<=k-i && j<=n-liv_c && j<=i; j++){
					if(i+j!=0 && DFS(liv_m+i, liv_c+j, true, false)){
						info = i +" misssionaries and " + j 
								+" cannibals back from the other side of the river.\n" + info;
					}
				}
			}
		}
		
		
		return false;
	}
}
