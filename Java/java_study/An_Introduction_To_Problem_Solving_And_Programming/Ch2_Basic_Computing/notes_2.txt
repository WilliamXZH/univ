第2章 基本计算

本章内容
在学习完本章之后，你将可以：
*描述整数和字符的Java数据类型
*编写声明变量的Java语句以及定义具名常量
*编写赋值语句，以及包含变量与常量的表达式
*定义一串字符并完成简单的字符串处理
*编写完成键盘输入和屏幕输出的Java程序
*遵从格式指南和约定
*在程序中书写有意义的注释
*使用类JFrame在Java应用程序中生成窗口界面
*使用类JOptionPane完成基于窗口的输入和输出

预备知识
第1章，尤其是1.2.3节的内容，
目的是熟悉类，对象和方法的表达方式。

2.1 变量和表达式

2.1.1 变量
程序中的变量用于存储诸如数字或字母这样的数据。可以认为他们是一种容器。
变量中的数字，字母以及其他数据项称为变量的值。这个值可以修改。。。

应该选择有意义的变量名称。改名称应该可以说明变量的用途或指明它所包含的数据类型。

变量的名称也必须遵从一些拼写规则(将在“Java标识符”一节中详细描述)。

在程序可以使用某个变量之前，必须陈述每一个变量的一些基本信息。
编译器(并且最终为计算机)需要知道变量的名称，需要知道要为该变量保留多少计算机内存，
变量中的数据项如何编码为一串的0和1。要在变量声明中给出这些信息，
Java程序中的每一个变量都必须在其第一次使用之前予以声明。

变量声明告诉计算机变量保存什么类型的数据。也就是说，你声明变量的数据类型。
由于不同类型的数据以不同的方式保存在计算机中，计算机必须知道变量的类型，
从而知道如何在计算机内存中存储和提取变量的值。

变量的声明包括类型名称，后跟一些列的变量名称，个名称之间使用逗号分隔。
是用分号结束变量的声明。列表中的所有变量名称都被声明为拥有相同的数据类型，
也就是声明开始处所指定的类型。

int(integer)
double
char

扼要重述 变量声明
在Java程序中，必须在其可以被使用声明变量。变量声明具有如下格式：
语法：
Type Variable_1, Variable_2, ...
示例：
int styleNumber, numberOfChecks, numberOfDeposits;
double amount, interestRate;
char answer;

2.1.2 数据类型
如前所述，数据类型指定一组值及其操作。事实上，由于这些值要以相同格式保存在内存中，
并具有为其定义的相同操作，因此这些值拥有特定的数据类型

谨记 语法变量
当你在本书中看到用于描述Java语法，类似于Type, Variable_1或Variable_2的东西时，
这些单词并不以这样的文字出现在你的Java代码中。他们称为语法变量，
他们是一些你要从其描述的类别中选择填入一些东西的位置。
例如，Type可以被int，double，char或任何其他类型名称取代。
Variable_1和Variable_2都可以被任何变量名称取代。

Java拥有两种主要的数据类型：类类型和基本类型。
基本类型的变量比对象(类类型的值)更简单，对象同时拥有数据和方法。

类型名称  值的类型  所用存储  值的范围
byte      整数      1个字节   -128~127
short     整数      2个字节   -32 678~32 767
int       整数      4个字节   -2 147 483 648~2 147 483 647
long      整数      8个字节   -9 223 372 036 854 775.808~9 223 372 036 854 775.807
float     浮点数    4个字节   
double    浮点数    8个字节   
char      单个字符  2个字节   从0~65 535 的所有Unicode字符
boolean             1位       True 或 False

第5章将详细解释类类型变量。

2.1.3 Java标识符
编程语言中表示名称――――比如变量的名称――――的技术术语是标识符(identifier)。

Java中，标识符(一个名称)只能包含字母，数字0到9以及下划线字符"_"。

标识符的第一个字符不能为数字。
特别地，任何标识符都不能包含空格或其他字符，比如圆点(句号)或星号"*"。

标识符的长度没有限制。然而，在实际运用中，依然存在长度限制，
但是，Java不存在正式的长度限制，他甚至可以接受看起来很还但冗长的名字。

Java区分大小写。也就是说，大写字母和小写字母被认为是不同的字符。

我们总是遵从这样的约定：
类的名称以大写字母开头，变量和方法的名称以小写字母开头。

关键词(keyword)或保留字(reserved word)。
它们在Java程序中拥有特殊的，预先确定的意义，不能用作变量，类或方法的名称，
也不能用作它们预定意义之外的任何其他东西。
所有的Java关键字都使用全小写字母。

扼要重述 标识符(名称)
Java程序中的一些东西(比如变量，类或方法)的名字称为标识符。
它不能以数字开头，并且只能包含字母，数字0~9以及下划线字符"_"。
大写和小写子母被认为是不同的字符
(也允许使用符号$,但它保留用于特殊目的，因此在Java名称中不应该使用$)。

尽管Java语言并不要求，但常用实践以及本书遵从的规则是，类名以大写字母开头，
变量和方法名称以小写字母开头。这些名称通常仅仅使用字母和数字拼写。

疑难杂症 Java区分大小写
不要忘记Java区分大小写，如果使用了某个标识符，比如，myNumber，
然后在程序的另一部分使用了乒协MyNumber，Java不会把它们视为相同的标识符。
要视为相同的标识符，它们必须具有完全相同的大小写。

FAQ 为什么我应该遵从命名的约定？谁制定了这些规则？
通过遵从命名约定，可以让你的程序易于阅读和理解。典型情况下，
你的指导老师或者讲师确定编写Java程序时你应该遵从的约定。然而，
刚才我们给出的命名约定几乎在所有Java程序员中都是一致的。
随着教材的进展，我们将逐步介绍Java程序其他方面的风格约定。
Sum Microsystems公司在其Web网站上提供了他自己的约定。
虽然该公司建议所有Java程序员都要遵从这些约定，但并非每一个人都会这么做。

2.1.4 赋值语句
给变量一个值或改变变量值的最直接途径是使用赋值语句。
当在赋值语句中使用时，等号=成为赋值运算符。

赋值语句组成：单个变量，后跟赋值运算符，再跟上一个表达式，
赋值语句以分号结尾。

表达式(Expression)可以是另一个变量，一个数值或者使用算术运算符将变量和数值结合起来的复杂表达式。

扼要重述 包含基本类型的赋值语句
等号左侧包含基本类型变量的赋值语句引发下属动作：首先，
等号右侧的表达式被计算，然后，等号左侧的变量被设置为这个计算值。

编程技巧 初始化变量
已经声明，但尚未由赋值语句(或以其他方式)给定一个值的变量被称为未初始化变量。

扼要重述 将变量声明和赋值语句结合起来
type variable_1 = Expression_1, variable_1 = Expression_2, ...

2.1.5 简单输入
EggsBasket2.java

2.1.6 简单屏幕输出

2.1.7 常量
e表示法或浮点表示法
例：8.65e8 == 8.65*10^8

Java并不限制小数点的位置

FAQ 浮点数中的浮点是什么
正如前面描述的e表示法，浮点数中小数点可以通过调整指数“浮动”到新的位置，
因此浮点数得到了这个名字。
计算机语言实现着使用这种技巧将每一个浮点数存储为小数点前恰好有一个数字(并包含适宜的指数)的数值。
由于这种实现总是移动这些数值中的小数点，因此称之为浮点数。

FAQ 常数5和5.0之间存在实质性的差别吗？

疑难杂症 浮点数的不精确性
浮点数值以有限的精度存储，因此，对于所有实际用途来说，他们仅仅是近似量。
我们可以认为浮点数以近似量的方式存储。

2.1.8 具名常量
public static final type Variable = Constant;

具名常量的约定是使用所有大写字母，单词之间使用下划线符号。

扼要重述 具名常量
要为常量定义一个名称，可以在变量声明前面放置关键词public static final，
该变量声明中包含作为初始化值的常量。该声明应放在类的声明中，
但要位于所有方法定义之外，包括main方法。
语法：
public static final type Variable = Constant;
示例：
public static final int MAX_STRIKES = 3;
public static final double MORTGAGE_INTEREST_RATE = 6.99;
public static final String MOTTO = "The customer is right!";
public staitc final char SCALE = 'K';
尽管并不是强制要求，绝大多数程序员使用全大写字母来给具名常量命名，
并使用下划线分割单词。

2.1.9 赋值兼容性
一般的，可以把下述表中任意类型的值赋给其右边任意类型的变量：
byte-->short-->int-->long-->float-->double

2.1.10 类型强制转换
当从double到int做强制转换(或者从任何浮点类型强制转换为任何整数类型)时，
转换值不做四舍五入。小数点后面部分被简单地丢弃。
这种做法称之为截断。

扼要重述 强制类型转换

编程技巧 将字符强制转换为整数


2.1.11 数学运算符
操作数：变量和数值的统称

FAQ %操作符对浮点操作数如何操作？
取余运算符通常与整数操作数一起使用，但是Java确实允许使用它来操作浮点数。
如果n和d是浮点数，那么n%d等于n-(d*q)。这里，q是n/d的整数部分。请注意，q的符号与n/d的符号相同。
例如，6.5%2.0的结果为0.5。

FAQ 算术表达式中的空格有什么作用吗？
任何Java语句中的空格通常都没有什么作用。唯一的例外是空格出现在一对双引号或单引号中时。
但是，其他情况下添加空格可以让Java语句更易于阅读。例如，
在任何二元运算符的两边都应该添加一个空格。

2.1.12 小括号与优先级规则
想同优先级的二元运算符按照从左到右的顺序执行。想同优先级的一元运算符按照从右到左的顺序执行。

最高优先级
第一级：一元运算符+，-，！，++和--
第二级：二元运算符*，/和%
第三级：二元运算符+和-
最低优先级

2.1.13 特殊赋值运算符
单个赋值运算符(=)前面放上一个算术运算符

案例研究 自动售货机找零
ChangeMaker.java

编程技巧 程序的基本结构
很多应用程序，包括在前面案例研究中编写的程序，都拥有类似的基本结构。
他们的基本步骤类似于Dale Carnegic(1885--1955)给公众演讲者提出的劝告：
“告诉听众你打算讲什么，演讲，然后告诉他们你讲了什么？”。
程序经常采用下述步骤：
1.准备：声明变量并向用户解释程序
2.输入：提示用户并得到输入
3.处理：处理所考虑的任务
4.输出：显示结果
这个结构(我们可以将其缩写为PIPO)对我们的原始程序尤其正确。
心中牢记这些步骤有助于在设计和编写时组织你的思想。

2.1.14 增量和减量运算符
增量运算符：++
减量运算符：--

2.1.15 增量和减量运算符的更多介绍
对于--m来说，m的值在表达式中使用之前被减少，而对于m--来说，m的值在表达式中使用之后被减少。

当增量或减量运算符被放在变量之前时，得到称之为前缀形式的表达式。
当它被放在变量之后时，得到后缀形式的表达式。请注意，
增量和减量运算符只可以作用到变量上。
它们不能作用到常量或更复杂的算术表达式上。

2.2 String类

2.2.1 字符串常量和变量
空字符串：字符串包含零个字符。

2.2.2 字符串的拼接
连接，拼接，粘接，使用+运算符可完成这样的操作

扼要重述 使用+操作字符串

2.2.3 String类的方法

FAQ 当调用方法时，在方法的名称前面写出对象名称和圆点。
我们采用什么术语来引用这个对象呢？
对象拥有方法。在调用这些方法之一时，对象接收到调用，并执行方法的操作。
因此，该对象称为接受对象，或者称为接收器。
文档通常把接受对象描述为该对象(this obkect).

方法                    返回类型  描述
charAt(index)           char      返回该字符串中下标index处的字符
compareTo(A_String)     int       如果该字符串在前，那么返回一个负整数，
                                  如果两个字符串相等，那么返回零，
				  如果A_String在前，那么返回正整数
concat(A_String)        String    等同于+
equals(A_String)        boolean   如果该字符串与A_String相等，那么返回true，否则返回false
equalsIgnoreCase(A_String)boolean 与方法equals相同，不区分大小写
indexOf(A_String)       int       返回子串A_String在该字符串中第一次出现的下标，未找到返回-1
lastIndexOf(A_String)   int       ...最后一次出现的下标
length()                int       返回该字符串的长度
toLowerCase()           String    把任何大写字母转换为小写字母
toUpperCase()           String    把任何小写字母转换为大写字母
replace(oldChar,newChar)String    把oldChar的每一个出现都替换为newChar
substring(Start)        String    获取从该字符串中下标Start开始到字符串末尾为止的子串相同的字符
substring(Start,End)    String    Start开始到End结束为止的子串
trim()                  String    删除前后的空白字符

FAQ 什么是空白？
显示时看不见的任何字符都笼统的称为空白。
这样的字符包括空格，制表符以及换行字符

2.2.4 字符串处理
StringDemo.java

疑难杂症 字符串下标越界
字符串中的第一个字符的下标为0，而不是1。因此，如果一个字符串包含n个字符，
那么最后一个字符的下标为n-1。无论什么时候，
当调用使用下标作为参数的字符串方法时(比如charAt)，下标的值必须有效。
也就是说，下标值必须大于等于零并且小于字符串的长度。
超出这个范围的下标值被称为越界或简单地称为无效。
这样的下标将会引发运行时错误。

2.2.5 转义字符
\"  双引号
\'  单引号
\\  反斜杠
\n  换行，转到下一行的开始处
\r  回车，转到当前行的开始处
\t  制表符(Tab),添加空白到下一个制表符位置

2.2.6 Unicode字符串
ASCII(American Standard Code for Information Interchange) 256
Unicode 字符集包含了整个ASCII 字符集，还有很多非英语语言中使用的字符 >65000个字符

2.3 键盘与屏幕的输入输出

2.3.1 屏幕输出

扼要重述 println
可以使用方法System.out.println显示数行文本。
输出项目可以是用引号引起来的字符串，变量，常量(如数值)以及可以在Java中定义的所有对象。

扼要重述 println与print的对比
System.out.println和System.out.print是几乎相同的方法。
println方法在显示了它的输出之后换到下一行，而print方法则不会换到下一行。

2.3.2 键盘输入
ScannerDemo.java

扼要重述 使用Canner类的键盘输入
import java.util.Scanner;
Scanner Scanner_Object_Name = new Scanner(System.in);
四种形式：
Int_Variable = Scanner_Object_Name.nextInt();
Double_Variable = Scanner_Object_Name.nextDouble();
String_Variable = Scanner_Object_Name.next();
String_Variable = Scanner_Obkect_Name.nextLine();

Scanner kbd的方法       返回类型       描述
next()                  String
nextLine()              String
nextInt()               int
nextDouble()            double
nextFloat()             float
nextLong()              long
nextByte()              byte
nextShort()             short
nextBoolean()           boolean
useDelimiter(Delimiter_Word) Scanner   将字符串Delimiter_Word设置为用于分隔输入的单一分隔符。
                                       只有准确的单词才是分隔符。特别是，空格，换行，
				       以及其他空白字符不再用作分隔符，
                                       除非他们是Delimiter_Word的一部分。

谨记 输入提示
在程序需要用户输入一些数据作为输入时，程序应该显示一个提示

疑难杂症 使用方法next和nextLine的问题
Scanner类的方法next和nextLine读取从上次键盘输入读剩下的地方开始的文本

谨记 空字符串
如果执行nextLine方法，并且用户简单地按回车键，nextLine方法返回空字符串。

2.3.3 其他输入分隔符
DelimitersDemo.java

2.3.4 使用printf进行格式化输出
用法类似于C

格式指示符    输出类型       示例
%c            字符           单个字符：%c，在一个字段中包含两个位置的单个字符：%2c
%d            十进制整数     一个整数：%d，在一个字段中包含5个位置的一个整数：%5d
                             在一个字段中包含6个位置，小数点后包含两个数字的一个浮点数：%6.2f
%e            指数型浮点数   以指数格式表示的浮点数：%e
%s            字符串         在一个字段中包含10个位置的格式化字符串：%10s

2.4 文档与风格

2.4.1 有意义的变量名称

2.4.2 注释
三种注释：//，/*...*/，/**...*/

CircleCalculation.java

谨记 编写自说明代码
子说明代码使用精心选择的名称，并具备清晰的编程风格。
程序的用途和任务应该对阅读该程序的任何程序员清晰明了，计时程序没有注释时也是如此。
应尽可能为程序的自说明化而努力。

扼要重述 Java注释
Java中有三种添加注释的方法：
*双符号//到行尾的所有内容都是注释，并且被编译器忽略
*书写在符号对/*和*/之间的所有内容都是注释，并且被编译器忽略
*书写在符号对/**和*/之间的所有内容都是注释，该注释可以被文档程序Javadoc处理，并且被编译器忽略

2.4.3 缩进
四个空格

2.4.4 使用具名常量
CircleCalculation.java

2.5 图形补充材料
JFrame,JOptionPane

2.5.1 运用到图形小应用程序上的样式规则

编程技巧 在图形小应用程序中使用具名常量
在设计绘图中，要识别出部件和它们的维数，给这些维数一个名称并把它们定义为具名常量。
尽最大可能和最大的合理性，让这些常量相互关联。也就是说，由于某些维度与其他维度相关联，
那么用另外一个维度的具名常量定义这个维度的具名常量。
如果可以通过使用具名常量在各种符号化的维度之间描述它们的关系，
那么调整这些常量的值就会容易得多了。

2.5.2 使用JFrame类创建Java GUI应用程序
HappyFace.java
HappyFaceJFrame.java

扼要重述 setSize方法
JFrame_Object.setSize(Width, Height);

FAQ setSize中宽度和高度使用什么单位？
像素

2.5.3 JOptionPane类概述
JOptionPaneDemo.java

JOptionPane是一个用于生成一种特殊窗口(称为对话框窗口或者对话框)的类，
对话框可用于获得输入，或用于显示程序的输出。

旁注 所有输入和输出都是字符串
来自用户的所有输入和为用户提供的所有输出都有一系列的字符组成。
当使用类JOptionPane读取数值输入时，必须把读入的字符串转换为所需要的数值值，正如后面要看到的那样。
类Scanner也是把用户输入读取为字符串。但是，比如说，
当调用像nextInt和nextDouble这样的方法时，已经完成了从字符串到数值输入的转换。

FAQ 为什么需要使用类名称代替对象名称来调用某些方法？
正常情况下，方法调用使用对象名称。
某些特殊方法并不要求调用对象，取而代之的是，使用类名称进行调用。
这些方法称为静态方法。

疑难杂症 不合适的输入

疑难杂症 仅仅显示整数

疑难杂症 忘记System.exit(0)

FAQ 为什么某些程序选哟System.exit,而另一些程序不需要它？
小应用程序不需要使用这个调用。
拥有窗口界面的应用程序通过此调用结束程序的执行

扼要重述 用于窗口输入输出的JOptionPane
对话框：showInputDialog,showMessageDialog

2.5.4 以其他数值类型方式读取输入
Byte.parseByte()
Short.parseShort()
Int.parseInt()
Long.parseLong()
Float.parseFloat()
Double.parseDouble()

编程技巧 在对话框窗口中实现多行输出
使用换行字符'\n'

编程示例 使用窗口进行I/O的零钱兑换程序
ChangeMaketWindow.java

2.6 本章小结
*变量可以保存值，比如数值。变量的类型必须与存储到该变量的值得类型匹配。
*变量和程序中的所有其他项目都应该改给出一个指明其如何使用的名称。这些名称在Java语言中称为标识符。
*所有变量都应该在程序中使用它们之前给定一个初始值。可以使用赋值语句完成这个任务，也可以与变量声明一起编写。
*算术表达式中的小括号声明指明了运算执行的顺序。
*当使用赋值语句将值赋给变量时，变量的数据类型必须与值的数据类型相匹配。
否则，必须使用类型强制转换。
*Scanner类的方法可用于读取键盘输入
*程序应该显示一条信息，以提示用户从键盘输入数据。
*println方法在其显示输出之后换到新一行，而print方法则不是这样。
*printf方法可以用于格式化输出。
*可以使用String类型的变量和常量。String是一种类类型，其行为与基本类型十分相似。
*可以使用加符号指示拼接两个字符串。
*String类具有可用于字符串处理的方法。
*可以在程序中为数值常量定义名称，并使用这些名称，而不是在程序中直接写出这些数值
*程序应该具备尽可能好的自说明特性。此外，还应插入注释，以解释任何不清晰的地方。
使用//起始行内注释，或者使用/**和*/对或/*和*/对来括起来多行注释。
*JFrame类可用于以类似于小应用程序的方式构造GUI应用程序。
*setSize方法将JFrame窗口大小调整为指定的宽度和高度。
*可以使用JOptionPane类来创建用于输入和输出的窗口界面。





