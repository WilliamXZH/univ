第5章 定义类与方法

本章内容
在学习完本章之后，将可以：
*描述类与类的对象的概念
*创建类的对象
*定义Java类及其方法
*描述在方法定义中参数是如何工作的
*使用修饰符public与private
*定义类的访问器方法与修改器方法
*编写和使用类的私有方法
*描述信息隐藏和封装
*编写方法的前置条件与后置条件
*描述javadoc的用途
*绘制简单的UML图
*描述类类型的引用，以及变量与类类型的参数
*定义equals方法及其他布尔值方法
*使用类Graphics的方法，以及想小应用程序中添加标签和init方法

预备知识
熟悉第四章

5.1 类与方法定义

对象(object)
实例(instance)
实例化(instantiate)
类指定了该类的对象所具有的属性或数据。
类还指定了对象可以采取的动作。

UML类图(UML class diagram)或类图
UML:Unified Modeling Language

5.1.1 类文件与分别编译

每一个Java类定义单独放在一个文件中
可以在程序使用某个类之前编译该Java类

编程示例 实现Dog类
实例变量(instance variable)
程序清单5.1 Dog类的定义
Dog.java

5.1.2 实例变量

程序清单5.2 使用Dog类及其方法
DogDemo.java

FAQ 为什么需要new？
在Java中，new是一个一元运算符，可以使用它来创建类的对象。当在表达式中使用new时，比如：
Dog scooby = new Dog();
它创建类Dog的一个对象。然后new运算符返回该对象的内存地址。上面的Java语句把这个地址赋值给变量scooby。对象在其内部可以具有变量，也就是说，对象的实例变量。new运算符在创建对象时把这些实例变量放在对象内。

FAQ 既然程序清单5.2中的程序是一个类，那么它为什么没有实例变量？
简单地说，一个程序就是一个具有方法main的类。虽然程序也可以具有其他方法，并且可以具有实例变量，但到目前为止所编写的程序，都没有实例变量或除main之外的任何方法。

5.1.3 方法

当使用方法时，成为激活或调用方法。
Java有两种方法：
*返回单个数据项的方法
*执行某个动作而不是返回一个数据项的方法

谨记 两种类型的方法
Java有两种类型的方法：返回单个值或对象的方法，以及执行某个动作而不是返回一个数据项的方法。通常，这两种不同类型的方法的适用方式稍有不同。

谨记 调用方法
通过书写接收对象名称、后跟原点、再写上方法名称、最后写上包含向方法提供信息的参数的一对小括号，即可调用方法。

扼要重述 调用返回一个值的方法
如果方法返回单个值，那么在任何能够所返回类型值的地方都可以调用该方法。例如，下述语句包含了方法gettAgeHumanYears的调用，所返回值付给了int类型变量HumanYears：
HumanYears = scooby.getAgeInHumanYears();

扼要重述 调用void方法
如果方法执行某个动作而不是返回单个值，可以书写其调用，后面跟上一个分号。这样的Java语句执行该方法定义的动作。例如，下面语句是对象balto的writeOutput方法调用：
balto.writeOutput();
该方法调用在屏幕上显示几行输出。

FAQ main函数呢？它确实是一个方法，为什么不调用它？
当运行程序时，系统将调用void方法main，这是一种特殊类型的方法调用（不需要通过编写代码来调用），但毫无疑问，这的确是方法调用。

5.1.4 定义void方法

方法定义的第一部分成为方法的首部（heading），首部通常写在一行上，但是如果太长一行写不下的话，也可以把它拆分成两行或多行。

首部之后是定义的其余部分，称为方法体（body）。在方法定义中，方法体的语句放在一对大括号{}之间。程序的任何语句或声明都可以出线在方法体中。在方法体内可以使用实例变量。方法定义中使用的任何其他变量，都必须在方法定义内生命。这样的变量称为局部变量（local variable）。





