第1章 计算机与Java语言概述

本章内容
在学习了本章之后，读者将可以：
*给出计算机硬件和软件的简要概述
*给出Java程序设计语言的概述
*描述程序设计的基本技巧，包括一般程序设计技巧和面向对象编程中程序设计技巧
*描述小应用程序和图形基础知识

预备知识
读者应该具有一台Java语言的计算机

1.1计算机基础
计算机系统有硬件和软件组成，硬件就是物理的机器，计算机要执行的一组指令成为程序。
用于向计算机发出指令的所有各种类型的不同程序统称为软件。

1.1.1硬件和内存
CPU,也就是中央处理单元(central processing unit),或者简单的称为处理器(processor),
是计算机中执行程序指令的设备。
计算机的存储器(memory)用于保存计算机要处理的数据(data)，并保存计算机的中间计算结果。
存储器由两种形式，分别称为主存和辅存。
主存(main memory)保存当前程序和程序操作的大部分数据。
辅存(auxiliary memory),或称为辅助存储器(scondary memory)中的数据即使在关闭计算机电源后也依然存在。
所有各种各样的磁盘，包括硬盘驱动器，闪存驱动器，光盘以及DVD盘都是辅助存储器。
RAM(random access memory)
字节的编号称为它的地址(address)。
字节(byte)是最小的存储器可寻址单位。
二进制数字(binary digit)
位(bit)
文件(file)
目录(directory)
文件夹(folder)

FAQ(常见问题解答) 为什么仅仅用0和1？
计算机使用0和1的原因在于，这样的话，制造仅仅具有两个稳定状态的电子设备更容易一些。
然而，当你编写程序的时候，通常情况下，不需要关心数据是否编码为0或1。
可以设想为计算机直接在其存储器中保存了数字，字母或一串字符，以这种方式编写你的程序。

把这些状态称为0和1并没有任何特别的地方，我们也一样可以使用任何其他两个名字，
比如A和B或真和假。重要的内涵是，其支撑物理设备具有两个稳定的状态，
比如开和关，高压和低压。将这两种状态称为0和1仅仅是一个简答的约定，但却是一个几乎普遍遵从的约定。

扼要重述 字节和存储单元
    计算机主存被划分为称之为字节的编码单元。字节的编号称为它的地址。
每一个字节可以保存8个二进制数字，或成为位，每一个数字都是0和1。要存储超过一个字节容量的数据，
计算机使用几个相邻的字节。这些相邻字节被看作一个单一的，更大一些的存储单元，
其地址为这些祥林梓节中第一个字节的地址。

1.1.2 程序

FAQ 软件到底是什么？
简单的说，软件就是程序。因此，软件公司是一种出产程序的公司。
计算机中的软件就是程序的集合。

1.1.3 编程语言，编译器，解释器
高级语言(high-level language)。
计算机可以直接理解的语言称为机器语言(machine language)。
汇编语言(assembly language)是机器语言的另外一种符号化形式，汇编语言更易于被人们理解。
这些语言称为低级语言。
编译器(compiler)
源程序(source program)
源代码(source code)
目标程序(object program)
目标代码(object code)

扼要重述 编译器
编译器是这样的一个程序，他将高级语言编写的程序翻译为计算机可以直接理解的，以更简单语言书写的程序。

解释器(interpreter)
扼要重述 解释器
解释其实这样的程序，它交替地翻译和执行使用高级语言编写的程序中的语句。

1.1.4 Java字节代码
Java编译器并不是把用户的程序翻译成特定计算机的机器语言，
而是把Java程序翻译成一种称为字节代码(bytecode)的语言。
字节代码不是任何特定计算机的机器语言，而是一种称为虚拟机(virtual machine)的假想计算机的机器语言。
虚拟机并不是某种特定的计算机，而是类似于所有典型的计算机。
酱紫接待吗编写的程序翻译成实际计算机的机器语言相当容易。完成这个翻译的程序是一种解释其，
成为Java虚拟机，或称为JVM，JVM负责翻译和运行Java字节代码。

扼要重述 字节代码
Java编译器将你的Java程序翻译为成为字节代码的语言。这种字节代码不是任何特定计算机的机器语言，
而是类似于绝大多数常用计算机的机器语言。字节代码容易地被翻译为给定计算机的机器语言。
每一种类型的计算机都将有自己的翻译器(或称为解释器)，它将字节代码指令翻译为用于该计算机的机器语言指令。

FAQ 为什么称为字节代码？
低级语言(比如字节代码和机器语言代码)的程序由指令组成，每一条指令都可以保存在内存的几个字节中。
通常情况下，每条指令的一个字节包含了操作码，或称为opcode，它指定了要执行的操作。
一字节操作码的表示法带来了术语字节代码。

1.1.5 类加载器
类(class)
类加载器(class loader)
连接器(linker)


1.2 Java基础

1.2.1 Java语言的历史
1991, Sun Microsystems's James Gosling, Java 1.0
1994, Web浏览器, WebRunner(HotJava) develop by Sun Microsystems's Patrick Naughton and Jonathan Payne,
1995秋, Netscape Communications Corporation 决定发行其可以运行Java程序的下一个Web浏览器版本

FAQ 为什么命名为Java？
Java名字的由来这个问题并没有什么有趣的答案。现在命名编程语言的习惯与父母给孩子取名字的方式相同。
编程语言的创立者只是选择他自己感觉良好的任何名字。Java语言的原始名字为Oak。后来，
创立者认识到已经有一种名为Oak的计算机语言，因此他们需要另外一个名字，Java就是所选的名字。
人们听到了名称Java起源的矛盾解释。一个传说的，但或许是可信的故事是，再一次漫长的，乏味的回忆中，
参加者在喝咖啡的时候，想到了这个名字，另一种说法是，这仅仅是一段历史。

1.2.2 应用程序和小应用程序
应用程序就是正规的程序。
小应用程序(applet)

1.2.3 第一个Java应用程序
Java程序使用软件对象(software object)或者简称为对象(object)来执行动作。这些动作是由方法定义的。
括号中的一个或多个项目称为参数(argument),他们提供了方法执行操作所需的信息。

任何语言的语法规则，无论是编程语言还是自然语言，都称为改语言的语法。

扼要重述 调用方法
Java程序使用对象来完成由方法定义的动作。当调用对象的某个方法时，对象完成相应的动作。
程序中，指示调用的方式为，写上对象名称，后面是句点(也称为圆点)，然后是方法名称，最后是一对可以包含参数的小括号。
参数为方法提供信息。

1.2.4 编写，编译和运行Java程序

编写，编译和运行Java程序的最简单方法是使用集成开发环境(Integrated Development Environment,IDE)。
IDE是将文本编辑器，用于编译和运行Java程序的菜单命令结合在一起。
Bluel，Eclipse，NetBeans都是免费的IDE，


1.3 编程基础

1.3.1 面向对象编程
Java是一种面向对象的编程语言(Object-Oriented Programming, OOP)。
对象具有特性，或称为属性(attributed)
对象属性的值给出了对象的状态(state)
对象可以实施的动作称为行为(behaviors)
每一个行为都由一段称为方法(method)的Java代码来定义

我们说同种类型的对象具有相同的数据类型，属于相同的类。
类(class)定义了对象的类型，他是创建对象的蓝图。对象的类型为类的名称。

类的所有对象都具有相同的属性和行为。

扼要重述 对象，方法，类
对象是一种程序构造，它具有与之关联的数据，称为属性，并可以执行某些动作，称为行为。
类定义了对象的类型或种类。他是定义对象的蓝图。
同一个类的所有对象都具有相同种类的数据和相同的行为。
当程序运行时，每一个对象都可以单独操作或与其他对象交互操作，从而完成程序的任务。
对象完成的动作由对象的方法定义。

面向对象编程中使用的三个主要设计原则：
*封装
*多态
*继承

封装(Encapsulation):
当你生产一个软件时，应该以这种方式描述软件：
告诉其他程序员如何使用这个软件，而省略这个软件如何工作的所有细节。
封装经常被称为信息隐藏(information hiding)

多态(Polymorphism):
多态的基本概念是它允许相同的程序指令在不同的上下文环境中表示不同的东西。
在诸如Java的编程语言中，多态意味着用作指令的一个方法名称可以引发不同的动作，
具体动作依赖于完成这个动作的对象的类型。

继承(Inheritance):
是组织累的一种方法，让你可以将通用属性和行为只定义一次，就可以把他们应用到一组类中。
通过定义通用类，随后使用继承来定义更专用的类，其方法是向通用类添加新的东西，或修改通用类现有的东西。

扼要重述 面向对象编程
面向对象编程(OOP)是一种编程方法，它定义了其行为和交互作用完成任务的对象。
OOP遵从封装，多态和继承的设计原则。

1.3.2 算法
对象具有其方法定义的行为。作为程序员，需要通过给出完成这些动作的指令来设计这些方法。
设计方法的最困难部分，不是规划出如何使用编程语言表达你的解决方案，
而是规划完成动作的计划或策略，这种策略通常表达为算法。

算法(algorithm)是解决问题的一组指令
伪代码(pseudocode)适应于与编程语言的结合

扼要重述 算法
算法是求解问题的一组指示。要成为一个合格的算法，那么这些指示必须被完整和精确地表达。

扼要重述 伪代码
伪代码是英语和Java的混合体。当时用伪代码时，只需以自己感觉最容易的语言写下算法的每一部分。
如果算法的某一部分使用英语更容易表达，那么就是用英语。
如果另一部分使用Java更易于表达没那么就使用Java

1.3.3 测试与调试
程序中的错误称为缺陷(bug)。因此，消除程序中错误的过程称为调试(Debugging)。
有3种常见的缺陷或错误：语法错误，运行时错误以及逻辑错误。

语法错误(syntax error)是在程序中出现了语法方面的错误。
编写程序时，必须十分严格地遵守语法规则。

扼要重述 语法
编程语言的语法是用于该语言的一组语法规则，也就是说，是用于编写程序或程序一部分的正确途径的规则。
编译器可以建则程序中的语法错误，并对发生的错误提供最佳的猜测。
与这些规则中的任意规则相冲突就是一种语法错误。编译器会检测出语法错误，
并给出编译器认为这是什么错误的出错信息。如果编译器说有一个语法错误，那么很有可能就是有这样的错误。
但是，编译器仅仅是猜测发生的错误是什么，因此它对问题的诊断有可能是不正确的。

程序运行时检测到的错误称为运行时错误(run-time error)。这种错误会导致产生一条出错信息。
出错消息或许并不容易被理解，但至少知道某些地方发生了错误。
有时，出错消息甚至可以准确地告诉你问题是什么。

如果程序的基本算法包含错误，或者使用Java编写的程序语法上正确，但逻辑上有错误，
那么程序就可能正常编译和运行，而不会出现任何出错消息。
这种程序可以运行并产生输出，但输出是不正确的。
在这种情况下，说明程序含有逻辑错误(logic error)。

疑难杂症 应对“疑难杂症”
任何编程语言都具有一些令人吃惊或难以处理的细节，这类问题通常称为陷阱，
但更华丽一些的术语称为疑难杂症(Gotcha)。疑难杂症是一种等着捕获你的陷阱。
当你跌落到陷阱中时，陷阱就“逮住”了你，这个词在英文中的发音是“gotcha”。

疑难杂症 隐藏错误
仅仅因为程序无错误地编译和运行，甚至产生看起来合理的输出，并不意味着程序是正确的。
应该使用给出可预测结果的一些测试数据来运行程序。要完成这一任务，
选择一些可以计算出正确结果的数据，无论是使用铅笔和纸，是通过查找答案，还是借助其他方法。
即使这样的测试也不能保证程序正确无误，但做的测试越多，那么对自己的程序就越有信心。

1.3.4 软件重用
为了确保在程序中使用的类易于重用，必须将这些类设计为可重用的类。
必须严格地指定该类的对象如何与其他对象相互交互。
这就是前面提到的封装的原则。但封装并不是必须遵从的唯一原则。
你也必须设计你的类，使其对象具备通用性，并且不专用于某个特定的程序。

Java携带了众多的类，称为Java类库(Java Class Library),有时候也称之为Java应用程序编程接口
(Java Application Programming Interface, API)。这个集合中的类被组织成包的形式。

1.4 图形补充材料
谨记 可以在小应用程序和应用程序中显示图形
编写小应用程序还是编写应用程序来显示图形却决于你的目标。
如果想在Web页面上展示图形特性，那么应该编写小应用程序。
否则的话，你应该编写应用程序。

1.4.1 一个示例图形小应用程序

1.4.2 图形的大小和位置
屏幕显示中的所有度量单位都不是英寸或厘米，而是像素。
像素(Pixel, 为Picture element的缩写)是屏幕上可以显示的最小长度。
百万像素(Megapixel)就是100万个像素。

1.4.3 绘制椭圆和圆
扼要重述 方法drawOval和fillOval
语法
canvas.drawOval(x, y, Width, Height);
canvas.fillOval(x, y, Width, Height);
方法drawOval绘制Width个像素宽，Height个像素高的椭圆轮廓。
这个椭圆这样放置：紧紧包围它的矩形左上角位于点(x, y)。
方法fillOval绘制与drawOval相同的矩形，只不过这个矩形进行了内部填充。

1.4.4 绘制弧形
扼要重述 drawArc
语法
canvas.drawArc(x, y, Width, Height, StartAngle, ArcAngle);
绘制一条弧线，改弧线是椭圆的一部分，该椭圆紧紧放置在矩形中，改矩形左上角位于点(x,y)。
椭圆的宽度和高度为Width和Height。所绘制弧线部分由StartAngle和ArcAngle指定，
这两个参数都以度为单位。椭圆水平线的最右端为0'。逆时针方向为正角度，顺时针方向为负度数。
从StartAngle开始，沿着椭圆前进ArcAngle度构成弧线。

FAQ 何谓canvas?
标识符canvas命名了一个完成绘图的对象。请注意，canvas是一个“哑变量”，它代表了Java用于完成绘图的对象。
不一定非要使用标识符canvas，但应保持一致性。如果修改了canvas的一次出现，
比如说修改为pen，那么就必须把所有的canvas都修改为pen。

1.4.5 运行小应用程序
通过Web浏览器
通过小应用程序查看器(applet viewer)


1.5 本章小结
*计算机的主存保存了当前正在执行的程序，并且也保存了程序正在操作的众多数据项。
计算机的主存划分为一系列称为字节的编号位置。这种存储不是持久的，
当计算机电源关闭时，它所保存的数据丢失。
*计算机的辅助存储用于或长或短的持久方式保存数据。即使计算机关闭电源后，
这种存储的数据依然被保持。硬盘驱动器，闪存，CD,DVD都是辅助存储的示例。
*编译器是一种程序，他把使用像Java这样的高级语言编写的都是程序翻译为使用低级语言编写的程序。
解释器是一种完成类似翻译工作的程序，但与编译器不同的是，解释器在翻译一部分代码后就执行这部分代码，
而不是一次性地翻译整个程序。
*Java编译器把Java程序翻译为字节代码语言表示的程序。当给出运行Java程序的命令时，
这种字节代码程序既可被翻译为机器代码指令，又可称为Java虚拟机(Java Virtual Machine)的解释器执行。
*对象是完成某些动作的程序构造。这些动作(或称为行为)有对象的方法定义。
对象的特性或属性由其数据来确定，这些属性的值给出了对象的状态。
*面向对象是一种思想方法，他将程序看作有独立行动或相互作用的对象组成。
软件对象既可以代表现实世界中的对象，也可以是一种抽象
*面向对象编程的3个主要原则分别为封装，多态和继承。
*类是一组对象属性和行为的蓝图。类定义了这些对象的类型。
同一个类的所有对象具有相同的方法。
*在Java程序中，方法调用的写法为：对象名称后面跟着写上一个句号(成为圆点)并写上方法名称，
最后在小括号中给出参数
*算法是一组解决问题的指令。为了成为算法，指令必须完整而精确地表达，
以至于人们可以只需遵从这些指令，无须添加指令中没有指定的任何细节或做任何决定。
*伪代码是英语和编程语言的结合，它用于编写算法指令。
*编程语言的语法是用于该语言的语法规则集。这些规则说明了语言中的语句是否正确。
编译器将检测程序语法中的错误。
*编写则计算机屏幕上显示图片的小应用程序。小应用程序通过互联网发送并在Web浏览器中浏览。
也可以使用小应用程序浏览器，这是一个独立的程序。
*方法drawOval绘制椭圆的外形。方法fillOval绘制与drawOval相同的椭圆，但在椭圆内部进行了填充。
方法drawArc绘制作为椭圆一部分的圆弧。



自测题答案某些要点

*高级语言程序以人类易于编写和阅读的方式编写。机器语言程序以计算机可以直接之心的形式编写。
在计算机可以执行之前，高级语言程序必须转换为机器语言的程序。
Java字节码是一种类似于最常见计算机的机器语言的低级语言。
可以相对容易地将Java字节代码表达的程序转换为几乎任何计算机的机器语言。
*封装是隐藏对使用对象来说不必要知道的所有细节的过程。换句话说，
封装是通过仅仅给出让程序员使用类或对象时所需的信息，描述类或对象的过程。
*继承是组织类的一种方法。可以定义一个具有公用属性和方法的通用类，
然后使用继承定义具体化的类，办法是添加或修改通用类的细节。

